// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  fistName    String
  lastName    String?
  email       String   @unique
  clerkUserId String   @unique
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model CourseTag {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?

  @@map("course_tags")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
}

enum CourseDifficulty {
  EASY
  MEDIUM
  HARD
}

model Course {
  id               String           @id @default(cuid())
  title            String
  description      String
  shortDescription String?
  slug             String           @unique
  status           CourseStatus     @default(DRAFT)
  thumbnail        String
  price            Float
  discountPrice    Float?
  tags             CourseTag[]
  difficulty       CourseDifficulty @default(EASY)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  modules          CourseModule[]

  @@map("courses")
}

model CourseModule {
  id          String   @id @default(cuid())
  title       String
  description String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order   Int
  lessons CourseLesson[]

  @@map("course_modules")
}

model CourseLesson {
  id           String @id @default(cuid())
  title        String
  description  String
  videoId      String
  durationInMs Int

  order Int

  moduleId String
  module   CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_lessons")
}
